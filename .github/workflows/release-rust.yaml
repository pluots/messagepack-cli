---
name: "Rust Build & Release"

# This configuration largely comes from ripgrep

on:
  push:
    tags:
    - 'v*'

env:
  RUSTFLAGS: "-D warnings"

jobs:
  build_release:
    name: "Build ${{ matrix.name }} binaries (cargo build)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - name: linux aarch
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - name: macos x64
            os: macos-latest
            target: x86_64-apple-darwin
          - name: macos aarch
            os: macos-latest
            target: aarch64-apple-darwin
          - name: windows msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: windows gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu

    env:
      CARGO: cargo
      TARGET_DIR: ./target
      TARGET_FLAGS: ""

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{matrix.target}}
        # Debugging aid
      - name: Show commands
        run: |
          echo pwd:
          pwd
          echo ls:
          ls
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
        # Perform build
      - name: Build binary
        run: cargo build --release --verbose --target ${{ matrix.target }}
      - name: Show output
        run: |
          ls target
          ls "target/${{ matrix.target }}"
          ls "target/${{ matrix.target }}/release"
        # Create .zip or .tar.gz file
      - name: Build archive
        shell: bash
        run: |
          echo '\nWorking directory:' && pwd
          echo '\nls:' && ls

          # Find the output directory with the latest timestamp
          cargo_outdir="$(find "${{ env.TARGET_DIR }}" -name msgpack-stamp -print0 | xargs -0 ls -t | head -n1 | xargs dirname)"
          ref_name=${GITHUB_REF##*/}

          # Remove leading 'v' for use where needed
          ref_name_stripped=$(echo $ref_name | perl -0pe 's/^v//')
          echo "\nRef name: \"$ref_name\""
          echo "\nRef name stripped: \"$ref_name_stripped\""

          STAGING_DIR="msgpack-$ref_name-${{ matrix.target }}" \
          CARGO_ASSETDIR="$cargo_outdir" \
          CARGO_BUILDDIR="${{ env.TARGET_DIR }}" \
          RELEASE_VERSION="$ref_name_stripped" \
          dist/create_release.sh

        # Upload to github
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_REPOSITORY: pluots/msgpack
        with:
          body_path: RELNOTES.md
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{ env.ASSET }}
