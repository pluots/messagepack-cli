---

on:
  push:
    branches:
    - main
  pull_request:

name: Rust Validation

env:
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: "-D warnings"
  CARGO_UNSTABLE_SPARSE_REGISTRY: true
  TARGET_DIR: ./target

jobs:
  check_test:
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            native: true
          - name: linux aarch
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            native: false
          - name: macos x64
            os: macos-latest
            target: x86_64-apple-darwin
            native: true
          - name: macos aarch
            os: macos-latest
            target: aarch64-apple-darwin
            native: false
          - name: windows msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            native: true
          - name: windows gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            native: true

    name: "Check/test ${{ matrix.name }}. Testing: ${{ matrix.native }}"
    runs-on: ${{ matrix.os }}
    env:
      MAKE_DIST: "1"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{matrix.target}}
      - name: Run check
        run: cargo check --all-features --all-targets --target ${{ matrix.target }}
      - name: Run tests
        if: matrix.native == 'true'
        run: cargo test --target ${{ matrix.target }}
      - name: Build binary
        if: matrix.native == 'true' && matrix.os != 'windows-latest'
        run: cargo build
      - name: Test make
        if: matrix.native == 'true' && matrix.os != 'windows-latest'
        run: |
          cargo_outdir="$(find target -name mpk-stamp -print0 | xargs -0 ls -t | head -n1 | xargs dirname)"
          echo outdir: "$cargo_outdir"
          
          mkdir testdir testdir/completion testdir/doc
          sh dist/create_install_makefile.sh
          mv Makefile.dist testdir/Makefile
          mv "$cargo_outdir"/mpk.1 testdir/doc
          mv "$cargo_outdir"/* testdir/completion
          mv target/debug/mpk testdir
          cd testdir

          echo running make install
          sudo make install

          echo testing files
          echo testing mpk presence
          test -f /usr/local/bin/mpk
          echo testing mpk.1 presence
          test -f /usr/local/share/man/man1/mpk.1

          if [ "{{ matrix.os }}" = "ubuntu-latest" ]; then
            echo testing mpk.bash presence
            test -f /usr/share/bash-completion/completions/mpk.bash
          fi
          
          echo running make uninstall
          sudo make uninstall
          
          echo testing files
          echo testing mpk presence
          test ! -f /usr/local/bin/mpk
          echo testing mpk.1 presence
          test ! -f /usr/local/share/man/man1/mpk.1

          if [ "{{ matrix.os }}" = "ubuntu-latest" ]; then
            echo testing mpk.bash presence
            test ! -f /usr/share/bash-completion/completions/mpk.bash
          fi

          mkdir -p ~/.local
          
          echo running install with prefix
          PREFIX="~/local" make install
          echo testing mpk presence
          test -f ~/local/bin/mpk
          echo running uninstall with prefix
          PREFIX="~/local" make uninstall
          echo testing mpk presence
          test ! -f ~/local/bin/mpk

  fmt:
    name: "Format (cargo fmt)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: "Clippy (cargo clippy)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - run: cargo clippy --all-features --all-targets -- -D warnings

  doc:
    name: "Docs (cargo doc)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@nightly
      - run: cargo doc --document-private-items
